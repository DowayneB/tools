<?php
namespace GodsDev\Tools\Test;
use \GodsDev\Tools\Tools;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-25 at 18:53:30.
 */
class BackyardTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Backyard
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAll() {
        // h
        $this->assertSame('a&amp;b&quot;c&apos;d&lt;e&gt;f', Tools::h('a&b"c\'d<e>f'));
        // set
        $this->assertSame(false, Tools::set($a));
        $a = 0;
        $this->assertSame(false, Tools::set($a));
        $a = 5;
        $this->assertSame(5, Tools::set($a));
        unset($a);
        $this->assertSame(5, Tools::set($a, 5)); // $a = 5
        $this->assertSame(5, $a);
        $a = 0;
        $this->assertSame(5, Tools::set($a, 5)); // $a = 5
        $this->assertSame(5, $a);
        $this->assertSame(5, Tools::set($a, 6)); // $a = 5
        $this->assertSame(5, $a);
        // ifempty
        $this->assertSame(5, Tools::ifempty($a, 6));
        $a = 0;
        $this->assertSame(5, Tools::ifempty($a, 5));
        // ifnull
        $this->assertSame(0, Tools::ifnull($a));
        $a = 5;
        $this->assertSame(5, Tools::ifnull($a));
        $a = null;
        $this->assertSame(null, Tools::ifnull($a));
        // equal
        unset($a);
        $this->assertSame(false, Tools::equal($a, 5));
        $this->assertSame(false, Tools::equal($a, 0));
        $this->assertSame(false, Tools::equal($a, false));
        $this->assertSame(false, Tools::equal($a, null));
        $a = 0;
        $this->assertSame(false, Tools::equal($a, '0'));
        $this->assertSame(false, Tools::equal($a, 0.0));
        $this->assertSame(true, Tools::equal($a, 0));
        // anyset
        $this->assertSame(true, Tools::anyset($_GET['a'], $_POST['abc'][1], $a));
        $a = null;
        $this->assertSame(false, Tools::anyset($_GET['a'], $a));
        $this->assertSame(false, Tools::anyset($_GET['a'][2], $b, $a));
        // array_search_i
        $fruits = [0 => 'Banana', 1 => 'Orange', 2 => 'Kiwi', 3 => 'ŠÍPEK', 'STRAWBERRY'];
        $this->assertSame(2, Tools::array_search_i('kiwi', $fruits));
        $this->assertSame(3, Tools::array_search_i('šípek', $fruits));
        // in_array_i
        $this->assertSame(false, Tools::in_array_i('kiwi2', $fruits));
        $this->assertSame(true, Tools::in_array_i('šípek', $fruits));
        // arrayRemoveItems
        $fruits = ['Apple', 'Pear', 'Kiwi'];
        $this->assertSame([2=>'Kiwi'], Tools::arrayRemoveItems($fruits, ['Apple', 'Pear']));
        $this->assertSame([2=>'Kiwi'], Tools::arrayRemoveItems($fruits, 'Apple', 'Pear', 'Orange'));
        $this->assertSame([], Tools::arrayRemoveItems($fruits, 'Apple', 'Pear', 'Kiwi', 'Orange'));
        // mb_ucfirst
        $this->assertSame('Šípek', Tools::mb_ucfirst('šípek'));
        // shortify
        $this->assertSame('Šípeč…', Tools::shortify('Šípeček', 5));
        // str_after, str_before
        $text = 'My name ís Emínem';
        $this->assertSame('My name ís ', Tools::str_before($text, 'Emínem'));
        $this->assertSame(false, Tools::str_before($text, 'EmíneM'));
        $this->assertSame('My name ís ', Tools::str_before($text, 'EMÍNEM', true));
        $this->assertSame('Emínem', Tools::str_after($text, 'name ís '));
        $this->assertSame(false, Tools::str_after($text, 'Name ís '));
        $this->assertSame('Emínem', Tools::str_after($text, 'Name Ís ', true));
        // str_putcsv
        $fields = [2, null, false, true, 'ab,c', 'Mary Jane', 'say "Hello"'];
        $this->assertSame('2;;;1;ab,c;"Mary Jane";"say ""Hello"""'."\n", Tools::str_putcsv($fields, ';'));
        // whitelist
        $os = 'Windows';
        Tools::whitelist($os, ['Windows', 'Unix'], 'unsupported');
        $this->assertSame('Windows', $os);
        $os = 'Solaris';
        Tools::whitelist($os, ['Windows', 'Unix'], 'unsupported');
        $this->assertSame('unsupported', $os);
        // blacklist
        $word = 'vitamins';
        Tools::blacklist($word, ['violence', 'sex'], '');
        $this->assertSame('vitamins', $word);
        $word = 'violence';
        Tools::blacklist($word, ['violence', 'sex'], '');
        $this->assertSame('', $word);
        // httpResponse
        $response = "content-type: text/html; charset=utf-8\r\npragma: no cache\r\n\r\n<p>Hello, world!</p>\n";
        $this->assertSame([
            'headers' => [
                'content-type' => 'text/html; charset=utf-8',
                'pragma' => 'no cache'
            ],
            'body' => "<p>Hello, world!</p>\n"
        ], Tools::httpResponse($response));
        // urlChange
        unset($_SERVER['QUERY_STRING']);
        $this->assertSame('a=1&b=text', Tools::urlChange(['a' => 1,'b' => 'text']));
    }

}